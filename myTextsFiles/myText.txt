// The website for my Wireframe
https://www.fluidui.com/editor/live/

// Ideas came from this Youtube
https://www.youtube.com/watch?v=W1Kttu53qTg

// Like bootstrap
https://www.youtube.com/watch?v=W1Kttu53qTg

https://www.youtube.com/watch?v=ZGymN8aFsv4

// To convert timestamp to actual timestamp
https://www.delftstack.com/howto/javascript/javascript-convert-timestamp-to-date/

// To set id check
https://www.youtube.com/watch?v=QQwo4E_B0y8

// I installed this package for key ckecking
npm i express-openid-connect dotenv

//I used this documentation to understand more about dotenv
https://github.com/auth0/express-openid-connect

// Youtube video to explain about how to get spotify songs
https://www.youtube.com/watch?v=0dmS0He_czs

// To get access to spotify songs
https://developer.spotify.com/dashboard/login

Client ID ded8f323db1b4feda5882c90a1c32d06
Client Secret 311f19911b304cd1b82ccd61b27731af 

// setting up youtube developer accounts

//Tutorial
https://www.youtube.com/watch?v=idYUy3hf3D0

https://developers.google.com/youtube/v3/getting-started?authuser=1

API Key:    AIzaSyBI2VKuOz2CdgJBXUBfnmyPy7f6fHzwYO8
API Key:    AIzaSyA9ZcRubHdOkYqfjF3MVPhCLsp_fMgt1Ug

My Youtube API
https://youtube.googleapis.com/youtube/v3/search?part=snippet&order=date&key=AIzaSyBI2VKuOz2CdgJBXUBfnmyPy7f6fHzwYO8
https://youtube.googleapis.com/youtube/v3/search?part=snippet&channelType=any&order=date&q=the%20weekend&safeSearch=moderate&key=AIzaSyBI2VKuOz2CdgJBXUBfnmyPy7f6fHzwYO8


// The link to css is here
https://cdnjs.com/libraries/font-awesome

// Icone are here
https://fontawesome.com/icons/globe?s=solid

// This is how to push the users info. into the database
https://www.youtube.com/watch?v=-RCnNyD0L-s&t=143s

// I installed passport
npm i passport passport-local express-session express-flash







// I got this code from the above websiteconst { auth } = require('express-openid-connect');
app.use(
  auth({
    issuerBaseURL: 'https://YOUR_DOMAIN',
    baseURL: 'https://YOUR_APPLICATION_ROOT_URL',
    clientID: 'YOUR_CLIENT_ID',
    secret: 'LONG_RANDOM_STRING',
    idpLogout: true,
  })
);


// Find a user in the database by id in the edit screen/window
router.get('/edit', (req, res) => {
    User.findById(req.params.id).then(userData => {
        res.render('edit', userData)
    })
    res.render('edit');
})

// This documentation is also helpfull in understanding how to authenticate users
auth0.com/docs/quickstart/webapp/express

// I installed the line below
npm install express express-openid-connect --save

// The code below came fron the link above after specifying the port number in the link above
const { auth } = require('express-openid-connect');

const config = {
  authRequired: false,
  auth0Logout: true,
  secret: 'a long, randomly-generated string stored in env',
  baseURL: 'http://localhost:4000',
  clientID: 'vLaV3fSngUrmEfkiHLuDdCsDTqfyXEJg',
  issuerBaseURL: 'https://dev-wyf7mc9t.us.auth0.com'
};

// auth router attaches /login, /logout, and /callback routes to the baseURL
app.use(auth(config));

// req.isAuthenticated is provided from the auth router
app.get('/', (req, res) => {
  res.send(req.oidc.isAuthenticated() ? 'Logged in' : 'Logged out');
});

// After running "openssl rand -hex 32" in the terminal
my secret hex = 677c605e97bb78bce5f50f0d807038db88e2a4aef471b1751aa4c504f97afd94

// Get user profile informathion
const { requiresAuth } = require('express-openid-connect');

app.get('/profile', requiresAuth(), (req, res) => {
  res.send(JSON.stringify(req.oidc.user));
});


// // req.isAuthenticated is provided from the auth router
// app.get('/', (req, res) => {
//     res.send(req.oidc.isAuthenticated() ? 'Logged in' : 'Logged out');
// });


// Fetch does not work. Need to fix it.






 4/15/2022      |       Create a database to hold user Accounts
 4/16/2022      |       Insert seed Data into databases
 4/17/2022      |       Create front Frontend to harvest users data 
 4/18/2022      |       Create a superuser to have control over all users accounts
 4/19/2022      |       Do user authentification and Authorization
 4/20/2022      |       Insert user data into database
 4/21/2022      |       Create a Youtube like APP
 4/22/2022      |       Create a database (user Accounts)
 4/23/2022      |       Find an open API of songs
 4/24/2022      |       Transfer songs from API to database  of songs
 4/25/2022      |       Let the user search songs by artist name or song title      
 4/26/2022      |       Let the user play the song



router.get("/", (req, res) => {
    User.find({})
        .then((userData) => res.render("index", { userData }));
});


// The code below sets up the authentication
const { auth } = require('express-openid-connect');

const config = {
    authRequired: false,
    auth0Logout: true,
    secret: 'a long, randomly-generated string stored in env',
    baseURL: 'http://localhost:4000',
    clientID: 'vLaV3fSngUrmEfkiHLuDdCsDTqfyXEJg',
    issuerBaseURL: 'https://dev-wyf7mc9t.us.auth0.com'
};

// Update a user by id in the database, then go to the home screen
router.put("/:id", (req, res) => {
    User.findOneAndUpdate({ _id: req.params.id }, req.body).then(
        (userData) => res.redirect('/')
    );
});







const express = require("express");
const res = require("express/lib/response");
const User = require("../models/users-models");

// Define a router
const router = express.Router();

// Render all data form database to the browser "index"
router.get("/", (req, res) => {
    User.find({})
        .then((userData) => res.render('index',{userData}));
});

// Add a user to the database, then go to the home screen
router.post("/signUp", (req, res) => {
    User.create(req.body)
        .then(() => res.redirect('/'));
});

// Update a user by id in the database, then go to the home screen
router.put("/:id", (req, res) => {
    User.findOneAndUpdate({ _id: req.params.id }, req.body).then(
        (userData) => res.redirect('/')
    );
});

// Find a user in the database by id in the edit screen/window
router.get('/edit', (req, res) => {
    User.findById(req.params.id).then(userData => {
        res.render('edit', userData)
    })
    res.render('edit');
})

router.get('/signUp', (req, res) => {
    Ingredient.findById(req.params.id).then(userData => {
        res.render('edit', userData)
    })
    res.render('index');
})

// Delete a user from database, then go to the home screen
router.delete("/:id", (req, res) => {
    User.findOneAndRemove({ _id: req.params.id }).then((userData) =>
        res.redirect('/')
    );
});

router.get('/:id', (req, res) => {
    res.render('signUp');
})

thead{
    background-image: linear-gradient(rgb(188, 183, 183), rgb(5, 5, 0), rgb(119, 122, 119));
    color: yellow;
    
}







module.exports = router;